stages:
  - build
  - deploy

variables:
  # USE YOUR PROJECT GITLAB CONTAINER REGISTRY
  DOCKER_REGISTRY: registry.gitlab.com/gwynbliedd1/webapp-deploy
  CI_DEPLOY_USER: gwynbliedd1
  #[Click on pfp -> preference -> Acsses tokens -> 'create a token with R,W Registry permissions']
  CI_DEPLOY_PASSWORD:  gldt-x-xxxxxxxxxxxxxxxxxx # The token value 
  KUBE_CONTEXT: gwynbliedd1/webapp-deploy:test # test is the kubernetes agent name

build_images:
  stage: build
  image: docker:20.10.16
  services:
     - docker:20.10.16-dind
  before_script: 
     - echo "$CI_DEPLOY_PASSWORD" | docker login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin
  script:
     - docker build -t $DOCKER_REGISTRY/frontend:latest ./dockerfiles/frontend
     - docker build -t $DOCKER_REGISTRY/backend:latest ./dockerfiles/backend
     - docker build -t $DOCKER_REGISTRY/mysql:latest ./dockerfiles/mysql
     - docker push $DOCKER_REGISTRY/frontend:latest
     - docker push $DOCKER_REGISTRY/backend:latest
     - docker push $DOCKER_REGISTRY/mysql:latest
deploy_to_k8s:
  stage: deploy
  image: 
    name: bitnami/kubectl:latest
    entrypoint: [""]
  before_script:
    - kubectl config use-context "$KUBE_CONTEXT"
  script:
    # Create MySQL password secret
    - kubectl create secret generic mysql-secret --from-literal=MYSQL_ROOT_PASSWORD=<Password>
    # KEY_FILE and CERT_FILE should be available on project settings -> CI/CD -> variables -> stored as (files)
    - kubectl create secret tls simple-app-tls --key=$KEY_FILE --cert=$CERT_FILE
    # Apply Kubernetes manifests
    - kubectl apply -f k8s/db-yamls/
    - kubectl apply -f k8s/backend-yamls/
    - kubectl apply -f k8s/frontend-yamls/
    - kubectl apply -f k8s/ingress-yamls/
  only:
    - main #branch this stage will runs on