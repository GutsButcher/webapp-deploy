stages:
  - build
  - debug
  - deploy

variables:
  DOCKER_REGISTRY: registry.gitlab.com/gwynbliedd1/webapp-deploy
  # If your deploy token name is 'ci-registry' for example
  CI_DEPLOY_USER: gwynbliedd1    # The username shown in deploy token
  CI_DEPLOY_PASSWORD:  gldt-s-P5uiyza1wDpgeQvPzu # The token value

# build_images:
#   stage: build
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   before_script: [
#     'echo "Registry: $CI_REGISTRY"',
#     'echo "Registry User: $CI_DEPLOY_USER"',
#     'echo "Docker Registry: $DOCKER_REGISTRY"',
#     'echo "$CI_DEPLOY_PASSWORD" | docker login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin'
#   ]
#   script:
#     - docker build -t $DOCKER_REGISTRY/frontend:latest ./dockerfiles/frontend
#     - docker build -t $DOCKER_REGISTRY/backend:latest ./dockerfiles/backend
#     - docker build -t $DOCKER_REGISTRY/mysql:latest ./dockerfiles/mysql
#     - docker push $DOCKER_REGISTRY/frontend:latest
#     - docker push $DOCKER_REGISTRY/backend:latest
#     - docker push $DOCKER_REGISTRY/mysql:latest
debug:
  stage: deploy
  image: 
    name: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest  # This image has both AWS CLI and kubectl
  before_script:
    - echo "$KUBE_CONFIG" | base64 -d > kubeconfig.yaml
    - export KUBECONFIG=kubeconfig.yaml
    # Add AWS credentials
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_DEFAULT_REGION=us-east-1
    # Verify AWS CLI works
    - aws sts get-caller-identity
    # Test kubectl
    - kubectl version --client
  script:
    - kubectl get nodes

# deploy_to_k8s:
#   stage: deploy
#   image: 
#     name: bitnami/kubectl:latest
#     entrypoint: [""]
#   before_script:
#     - echo "$KUBE_CONFIG" | base64 -d > kubeconfig.yaml
#     - export KUBECONFIG=kubeconfig.yaml
#         # Add these debug commands
#     - kubectl config view
#     - kubectl get nodes
#   script:
#     # Create MySQL password secret
#     - kubectl create secret generic mysql-secret --from-literal=MYSQL_ROOT_PASSWORD=SecurePassword --dry-run=client -o yaml | kubectl apply -f -
#     # Apply Kubernetes manifests
#     - kubectl apply -f k8s/db-yamls/
#     - kubectl apply -f k8s/backend-yamls/
#     - kubectl apply -f k8s/frontend-yamls/
#     - kubectl apply -f k8s/ingress-yamls/
#  only:
#    - main